package com.etezaz.assessment_task_magma.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.etezaz.assessment_task_magma.model.db.table.BhAdsImageStatus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BH_ADS_IMAGE_STATUS".
*/
public class BhAdsImageStatusDao extends AbstractDao<BhAdsImageStatus, String> {

    public static final String TABLENAME = "BH_ADS_IMAGE_STATUS";

    /**
     * Properties of entity BhAdsImageStatus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AdCode = new Property(0, String.class, "adCode", true, "AD_CODE");
        public final static Property ImageIndex = new Property(1, int.class, "imageIndex", false, "IMAGE_INDEX");
        public final static Property ImageUrl = new Property(2, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property ImageStatus = new Property(3, boolean.class, "imageStatus", false, "IMAGE_STATUS");
        public final static Property AnnotatedBy = new Property(4, String.class, "annotatedBy", false, "ANNOTATED_BY");
    }


    public BhAdsImageStatusDao(DaoConfig config) {
        super(config);
    }
    
    public BhAdsImageStatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BH_ADS_IMAGE_STATUS\" (" + //
                "\"AD_CODE\" TEXT PRIMARY KEY NOT NULL ," + // 0: adCode
                "\"IMAGE_INDEX\" INTEGER NOT NULL ," + // 1: imageIndex
                "\"IMAGE_URL\" TEXT," + // 2: imageUrl
                "\"IMAGE_STATUS\" INTEGER NOT NULL ," + // 3: imageStatus
                "\"ANNOTATED_BY\" TEXT);"); // 4: annotatedBy
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BH_ADS_IMAGE_STATUS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BhAdsImageStatus entity) {
        stmt.clearBindings();
 
        String adCode = entity.getAdCode();
        if (adCode != null) {
            stmt.bindString(1, adCode);
        }
        stmt.bindLong(2, entity.getImageIndex());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
        stmt.bindLong(4, entity.getImageStatus() ? 1L: 0L);
 
        String annotatedBy = entity.getAnnotatedBy();
        if (annotatedBy != null) {
            stmt.bindString(5, annotatedBy);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BhAdsImageStatus entity) {
        stmt.clearBindings();
 
        String adCode = entity.getAdCode();
        if (adCode != null) {
            stmt.bindString(1, adCode);
        }
        stmt.bindLong(2, entity.getImageIndex());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
        stmt.bindLong(4, entity.getImageStatus() ? 1L: 0L);
 
        String annotatedBy = entity.getAnnotatedBy();
        if (annotatedBy != null) {
            stmt.bindString(5, annotatedBy);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BhAdsImageStatus readEntity(Cursor cursor, int offset) {
        BhAdsImageStatus entity = new BhAdsImageStatus( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // adCode
            cursor.getInt(offset + 1), // imageIndex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl
            cursor.getShort(offset + 3) != 0, // imageStatus
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // annotatedBy
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BhAdsImageStatus entity, int offset) {
        entity.setAdCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImageIndex(cursor.getInt(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImageStatus(cursor.getShort(offset + 3) != 0);
        entity.setAnnotatedBy(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BhAdsImageStatus entity, long rowId) {
        return entity.getAdCode();
    }
    
    @Override
    public String getKey(BhAdsImageStatus entity) {
        if(entity != null) {
            return entity.getAdCode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BhAdsImageStatus entity) {
        return entity.getAdCode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
